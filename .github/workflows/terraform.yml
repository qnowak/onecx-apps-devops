name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      pull-requests: write

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform-scripts

    steps:
    #  Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.4
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc
    - name: Terraform Init
      id: init
      # if: steps.check_files.outputs.files_exists != 'true'
      run: terraform init

    - name: Remove all orphaned resources from state
      id: remove_orphaned_resources
      run: |
          terraform state rm 'module.onecx-ai.module.onecx-example-svc.module.sonarcloud.sonarcloud_project.project'
          terraform state rm 'module.onecx-ai.module.onecx-example-svc.module.sonarcloud.sonarcloud_project_main_branch.branch'

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Tidy Plan output
      run : |
        echo "${{ steps.plan.outputs.stdout }}" | grep -E '^\s*[~+-]' > plan-out.txt
        cat plan-out.txt
        echo 'PLAN_OUTPUT<<EOF' >> $GITHUB_ENV
        echo "$(cat plan-out.txt)" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${{ env.PLAN_OUTPUT }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
